// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/interface.go

// Package storage is a generated GoMock package.
package storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	category "github.com/maximilienandile/backend-go-tuto/internal/category"
	product "github.com/maximilienandile/backend-go-tuto/internal/product"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Categories mocks base method.
func (m *MockStorage) Categories() ([]category.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Categories")
	ret0, _ := ret[0].([]category.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Categories indicates an expected call of Categories.
func (mr *MockStorageMockRecorder) Categories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Categories", reflect.TypeOf((*MockStorage)(nil).Categories))
}

// CreateCategory mocks base method.
func (m *MockStorage) CreateCategory(category category.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", category)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockStorageMockRecorder) CreateCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStorage)(nil).CreateCategory), category)
}

// CreateProduct mocks base method.
func (m *MockStorage) CreateProduct(product product.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockStorageMockRecorder) CreateProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockStorage)(nil).CreateProduct), product)
}

// Products mocks base method.
func (m *MockStorage) Products() ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Products")
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Products indicates an expected call of Products.
func (mr *MockStorageMockRecorder) Products() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Products", reflect.TypeOf((*MockStorage)(nil).Products))
}
